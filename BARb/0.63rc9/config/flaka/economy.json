// Mono-space font required
{
"economy": {
	"energy": {
		// If land area >= 40% of the map then "land" config used, "water" otherwise
		"side": {
			"armada": {
				"land": {
					// "<energy_def>": [<lower limit>, <upper limit>, <m-income>, <e-income>, <efficiency>]
					// limit = random(<lower limit>..<upper limit>)
					//efficiency calculation: engy.cond.score = SQUARE(engy.make) / (cdef->GetCostM() * cdef->GetDef()->GetXSize() * cdef->GetDef()->GetZSize());
					//higer value => more efficient | e-output * e-output / mcost*x*y
					"armwin": [30, 60],
					"armsolar": [6, 10],  // efficiency=0.025806
					"armadvsol": [16, 20, 12, 150, 0.238], 	// efficiency=0.237542
					"armgeo": [4, 8, 16, 300, 0.6],
					"armgmm":[4, 8, 25, 600, 2.2],
					"armageo":[0, 1, 35, 1000, 3.0],
					"armfus": [4, 6, 30, 700, 2.0],		// efficiency=1.937984
					"armckfus": [1, 3, 50, 2000, 2.1], // efficiency=2.400266
					"armafus": [50,100, 70, 4000, 6.44]  // efficiency=6.443299
				},
				"water": {
					"armtide": [14, 25],
					"armwin": [30, 60],
                    "armsolar": [1],
                    "armadvsol": [16, 20, 12, 150, 0.238],
                    "armgeo": [4, 8, 16, 300, 0.6],
                    "armgmm":[4,8, 25, 600, 2.2], 
                    "armageo": [0, 1, 35, 1000, 3.0],
                    "armfus": [4, 6, 30, 700, 2.0],	
					"armckfus": [1, 3, 50, 2000, 2.1], // efficiency=2.400266
					"armafus": [50,100, 70, 4000, 6.44],  // efficiency=6.443299					
					"armuwfus": [6, 12, 35, 600, 2.8]
				}
			},
			"cortex": {
				"land": {
					"corwin": [30, 60],
					"corsolar": [6, 12], // efficiency=0.026667
                    "coradvsol": [16, 20, 12, 180, 0.238], //efficiency=0.237542
                    "corgeo": [4, 8, 16, 300, 0.6],
                    "corageo": [0, 1, 35, 1000, 3.0],
					"corfus": [4, 6, 25, 600, 2.06],  // efficiency=2.057844
					"corafus": [50, 100, 60, 4000, 6.44] // efficiency=6.443299
				},
				"water": {
					"cortide": [20, 40],
					"corwin": [10, 20],
					"corsolar": [6, 12], // efficiency=0.026667
                    "coradvsol": [16, 20, 12, 180, 0.238], //efficiency=0.237542
                    "corgeo": [4, 8, 16, 300, 0.6],
                    "corageo": [0, 1, 16, 1000, 3.0],
                    "corfus": [4, 6, 35, 600, 2.06],  // efficiency=2.057844
                    "corafus": [50, 100, 60, 4000, 6.44], // efficiency=6.443299
					"coruwfus": [6, 12, 35, 600, 2.8]  // efficiency=2.756296
				}
			}
		},
		
		
		"factor": [[5.0, 1], [60.0, 3600]], //desired energy factor at a certain time
		// desired energy rule #1: e-income >= m-income * factor
		// income factor for energy, time is in seconds
		// [[<start_factor>, <start_time>], [<end_factor>, <end_time>]]
		
		"cost_ratio": 0.043, 
		// min. limit for energy to cost ratio to have access to next energy tier 
		// (e.g. armfusion ecost (21000*0.04=1260 => 840e income neccessary to start building fusion)
		// ratio 0.4 => armadvsol 200e, armfus 840e, armafus 2760e
	
		"pylon": []
	},

	"cluster_range": 900,
	//size of mex cluster between two points

	"metal": {
		"armada": ["armmex", "armmoho"],  // [T1_mex, T2_mex]
		"cortex": ["cormex", "cormoho"]  // [T1_mex, T2_mex]
	},
// buildpower -  Mobile buildpower to metal income ratio,
// works but with regard to behaviour->UnitDef->build_speed. With 1.25 and m-income=100 means AI will try to build at max 125 mobile build_speed in total.

//eps-step - scales metal income; // ecoFactor = teamSize*eps_step+(1-eps_step);  affect next eenergy and m-income:
// 1) during new builder task creation; 2) for tier selection from factory 3) for making defences 4) for checking if enough income to build super weapon

//buildpower -  Mobile buildpower to metal income ratio,
// works but with regard to behaviour->UnitDef->build_speed. With 1.25 and m-income=100 means AI will try to build at max 125 mobile build_speed in total.

//mspull - // Mobile constructor to static constructor metal pull ratio; [[<value>, <start_mex_percent>], [<value>, <end_mex_percent>]]

	"auto_mex": 2,  // number of T2 builders for each mobile type forced to auto-mex only
	"eps_step": 0.2,
	"buildpower": 1.50, //1.25
	"excess": -1.0, 	// Metal excess to income ratio, -1 to disable
	"ms_pull": [[0.57, 0.0], [0.66, 0.34]], // If its <1.0 then expansion obeys ms_pull rule, if >=1.0 then ms_pull doesn't affect expansion (mex, pylon, energy).
	"mex_max": 1.0,  //  0.1 = 10% ai stops expanding when it ahs 10% of map
	"build_delay": -1, // Construction order delay in seconds, -1 to disable | used to make ai easier 	
//	"switch": [540, 900], // factory switch intervall- each factory resets timer; event based also on eco & caretaker | switch = random(<min_interval>..<max_interval>)

	//"terra": "armsy",
	"airpad": {
		"armada": "armasp",
		"cortex": "corasp"
	},
	"nanotc": {
		"armada": "armnanotc",
		"cortex": "cornanotc"
	},

	// Unknown UnitDef replacer
	"default": {
		"armada": "armwin",
		"cortex": "corwin"
	}
}
}
